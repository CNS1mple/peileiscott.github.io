[
    {
        "title": "CMU-15545 实验环境配置",
        "uri": "cmu-15545-lab-config",
        "content": "Mac Intel chip                   Mac M1 chip                 M1           MIT6 S081         Linux     Mac M1                                                                CMU 15545 HOMEPAGE      Ubuntu20 04             Github  README   https   github com cmu db bustub     fork          git clone           bustub     sudo build_support packages sh            sudo  build_support packages sh command not found            chmod  x build_support packages sh             bustub              bash mkdir build cd build cmake    check tests",
        "objectID": "cmu-15545-lab-config",
        "date": "2021-06-02T13:30:44.000Z",
        "lastmod": "2021-06-02T13:30:44.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "CMU-15545",
            "数据库"
        ],
        "categories": [
            "CMU-15545"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "CS144 lab0 详解",
        "uri": "cs144-lab0",
        "content": "https   cs144 github io assignments lab0 pdf build prerequisite                 Ubuntu20 04                                       g    version   8  clang tidy  version   6 7  clang format  version   6 7             clang tidy 7   clang format 7  cmake  version    3  libpcap dev git iptables mininet  version    2 2 0  tcpdump telnet wireshark socat netcat openbsd GNU coreutils bash doxygen graphviz     apt list   installed   grep                sudo apt install        Fetch Web page        http   cs144 keithw org hello          Hello  CS144         telnet cs144 keithw org http                   hello HTTP 1 1                    HTTP 1 1       hello        Host  cs144 keithw org                host    Connection  close                                                                                    Send yourself email             QQ                 Listening connecting                netcat  lnvp 9090                      telnet localhost 9090                    Connection received 127 0 0 1 50436                                                              fetching building starter code  shell git clone https   github com cs144 sponge cd sponge mkdir build cd build            clang tidy 7   clang format 7             CLANGTIDY clang tidy 7 CLANGFORMAT clang foramt 7 cmake      Writing webget                       C          libsponge util file descriptor hh libsponge util socket hh libsponge util address hh            webget cc  getURL                   doctests socketexample_2 cc      TCPSocket                     API                     TCPSocket                          fetch web page      HTTP          r n                TCPSocket          Connection  close                                                         EOF  end file                TCPSocket             CPP void get_URL const string  host  const string  path       code here     will need connect  http  service    computer whose name  host  string     request URL path given  path  string     Create TCP socket connect  http  service host TCPSocket socket  socket connect Address host   http        you ll need print everything server sends back      not just one call read      everything  until reach     eof   end file      Send HTTP request server socket write  GET     path     HTTP 1 1 r nHost      host     r n r n       Tell server it s not going send requests socket shutdown SHUT_WR      Print everything server sends back   socket eof      cout _buf    bool endinput   false  sizet bytes_written   0  sizet bytes_read   0               CPP ByteStream  ByteStream const sizet capacity    capacity capacity     size_t ByteStream  write const string  data     remaining_capacity      0    return 0    sizet len2write   min remainingcapacity    data size      size_t   0    len2write  i      buf pushback data i      byteswritten    len2write  return len2write         param in  len bytes will copied output side buffer string ByteStream  peekoutput const sizet len  const   sizet len2peek   min buffersize    len   return string   assign buf begin    buf begin     len2peek          param in  len bytes will removed output side buffer void ByteStream  popoutput const sizet len    sizet len2pop   min buffersize    len    size_t   0    len2pop  i      buf popfront      bytesread    len2pop        Read  i e   copy pop  next  len  bytes stream      param in  len bytes will popped returned      returns string std  string ByteStream  read const size_t len    string ret   peek_output len   pop_output len   return ret    void ByteStream  endinput     end_input   true    bool ByteStream  inputended   const   return end_input    sizet ByteStream  buffersize   const   return _buf size      bool ByteStream  bufferempty   const   return buffersize      0    bool ByteStream  eof   const   return endinput     buffer_size      0     sizet ByteStream  byteswritten   const   return byteswritten    sizet ByteStream  bytesread   const   return bytesread    sizet ByteStream  remainingcapacity   const   return capacity   buf size         build     make     make check_lab0              make format",
        "objectID": "cs144-lab0",
        "date": "2021-06-23T15:55:44.000Z",
        "lastmod": "2021-06-23T15:55:44.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "CS144",
            "计算机网络"
        ],
        "categories": [
            "CS144"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "CS144 lab1 详解",
        "uri": "cs144-lab1",
        "content": "https   cs144 github io assignments lab1 pdf                 TCP  substrings segments                   lab0    byte_stream                                                           substring                     bytestream       streamassembler               capacity               substring                                            byte_stream            substring       index                                      eof                                                     CPP ReassemblerTestHarness test 8   test execute SubmitSegment  abc   0    test execute BytesAssembled 3    test execute NotAtEof     test execute SubmitSegment  ghX   6  with_eof true    test execute BytesAssembled 3    test execute NotAtEof     test execute SubmitSegment  cdefg   2    test execute BytesAssembled 8    test execute BytesAvailable  abcdefgh     test execute NotAtEof       map         map   substring        stream_reassembler hh  CPP std  map index2byte    bool _eof false   sizet head_index   0  sizet unassembled_bytes   0  ByteStream _output         void DUMMY_CODE Targs          unused        using namespace std  StreamReassembler  StreamReassembler const sizet capacity    output capacity   _capacity capacity          details function accepts substring  aka segment  bytes      possibly out of order  logical stream  assembles newly     contiguous substrings writes output stream order  void StreamReassembler  pushsubstring const string  data  const sizet index  const bool eof       DUMMY_CODE data  index  eof    index    headindex   output remainingcapacity      return     index   data size   headindex   output remainingcapacity      flag   false       size_t count   0   sizet   index    head_index    index2byte find i     index2byte end      index2byte i    data i   index      count    unassembledbytes        string str        sizet   head_index  index2byte find i     index2byte end    i      str    index2byte i   index2byte erase i   headindex    unassembledbytes      _output write str    flag    eof    _eof   true     _eof    empty      output endinput        sizet StreamReassembler  unassembledbytes   const   return unassembledbytes    bool StreamReassembler  empty   const   return unassembled_bytes      0                                                                    deque   map         map             bytes                                           bitmap                      deque                                stream_reassembler hh  CPP std  deque _buf  std  deque _bitmap  bool _eof false   sizet head_index   0  sizet unassembled_bytes   0  ByteStream _output         void DUMMY_CODE Targs          unused        using namespace std  StreamReassembler  StreamReassembler const size_t capacity    buf capacity    0    bitmap capacity  false   output capacity   capacity capacity          details function accepts substring  aka segment  bytes      possibly out of order  logical stream  assembles newly     contiguous substrings writes output stream order  void StreamReassembler  pushsubstring const string  data  const sizet index  const bool eof       DUMMY_CODE data  index  eof    index    headindex   output remainingcapacity      return     index   data size     headindex     bitmap i   head_index     buf i   head_index    data i   index   bitmap i   head_index    true  unassembledbytes        string str        _bitmap front      str    _buf front    buf popfront    buf pushback   0    bitmap popfront    bitmap pushback false     size_t len   str size     len   0    unassembledbytes    len  headindex    len  _output write str        _eof    empty      output endinput        sizet StreamReassembler  unassembledbytes   const   return unassembledbytes    bool StreamReassembler  empty   const   return unassembled_bytes      0",
        "objectID": "cs144-lab1",
        "date": "2021-06-26T08:20:44.000Z",
        "lastmod": "2021-06-26T08:20:44.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "CS144，计算机网络"
        ],
        "categories": [
            "CS144"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "CS144 lab2 详解",
        "uri": "cs144-lab2",
        "content": "https   cs144 github io assignments lab2 pdf         TCP       segmentreceived    TCP  TCP segment        lab    bytestream streamreassembler       ackno   windowsize   ack win_size                                                        stream_index  64 bit  seqno  32 bit          TCP                   20       Payload              TCP  seqno ackno  4       32 bit                        lab1 streamreassembler    index    64 bit        streamreassembler            ack                        absolute seqno stream index                                 seqno absolute seqno         absolute seqno   seqno wrap                       unwrap             unwrap              n       isn  initial sequence number  checkpoint                      offset   isn   2 32   2  n   1   offset   1    2 32   2    3      32            offset  absolute seqno       offset            offset offset   2 32 offset   2   2 32 offset   3   2 32          checkpoint                      checkpoint                          checkpoint   A   2 32   B       checkpoint               A 1    2 32   offset A   2 32   offset  A 1    2 32   offset                            A              checkpoint             A  0   A 1    2 32   offset                                CPP WrappingInt32 wrap uint64_t n  WrappingInt32 isn       DUMMY_CODE n  isn   return isn   static_cast n     uint64t unwrap WrappingInt32 n  WrappingInt32 isn  uint64t checkpoint       DUMMY_CODE n  isn  checkpoint   uint32t offset   n rawvalue     isn raw_value    uint64t mask   staticcast UINT32_MAX  num2     checkpoint   num2     num2   checkpoint   uint64_t num3    top32    1ul TCPReceiver  ackno   const      Return empty no SYN received   synrecved    return nullopt    uint64t absseqno   streamout   byteswritten       FIN accounts one byte  sure reassembler    successfully received EOF signal ended input stream     Otherwise  something went wrong FIN means nothing   finrecved    streamout   inputended      abs_seqno      return optional wrap absseqno   1  isn        window_size   windowsize   tcpreceiver                            lab0 lab1  bytestream streamreassembler                       bytestream  remainingcapacity",
        "objectID": "cs144-lab2",
        "date": "2021-06-27T16:55:11.000Z",
        "lastmod": "2021-06-27T16:55:11.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "CS144，计算机网络"
        ],
        "categories": [
            "CS144"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "Ubuntu下包管理器apt常见命令",
        "uri": "ubuntu-apt-command",
        "content": "Ubuntu apt              Linux           apt update  shell sudo apt update                    apt update                           apt upgrade                         shell        sudo apt upgrade                            shell          apt list   upgradeable         sudo apt upgrade                  y n                  apt upgrade    y Flag  shell sudo apt upgrade  y                  apt update apt upgrade      shell sudo apt update    sudo apt upgrade  y   apt install                shell sudo apt install                  y n                  apt install    y Flag  shell sudo apt install  y            apt install                                  version  shell    mysql 5 7 sudo apt install mysql server 5 7   apt remove purge                shell apt remove                    sudo apt remove                                          sudo apt autoremove apt purge              sudo apt purge       apt list  shell sudo apt list   apt list                                                grep        shell sudo apt list   grep package_name                        shell sudo apt list   installed                    shell sudo apt list   upgradeable   apt show  shell sudo apt show package_name   apt show",
        "objectID": "ubuntu-apt-command",
        "date": "2021-06-02T08:39:50.000Z",
        "lastmod": "2021-06-02T08:39:50.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "apt",
            "Linux"
        ],
        "categories": [
            "Linux"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "MIT-6.S081实验环境搭建",
        "uri": "mit-6.s081-lab-config",
        "content": "Ubuntu20 04                     apt    shell sudo apt update    sudo apt upgrade            shell sudo apt install git build essential gdb multiarch qemu system misc gcc riscv64 linux gnu binutils riscv64 linux gnu        qemu   shell wget https   download qemu org qemu 5 1 0 tar xz tar xf qemu 5 1 0 tar xz     qemu   shell cd qemu 5 1 0   configure   disable kvm   disable werror   prefix  usr local   target list  riscv64 softmmu             ERROR  pixman    0 21 8 not present  Please install pixman devel package       sudo apt install libpixman 1 dev               configure   disable kvm   disable werror   prefix  usr local   target list  riscv64 softmmu  sudo install cd        riscv64 unknown elf gcc   shell sudo apt install gcc riscv64 unknown elf            shell git clone git   g csail mit edu xv6 labs 2020                  shell   riscv64 unknown elf gcc   version riscv64 unknown elf gcc    9 3 0       qemu system riscv64   version QEMU emulator version 4 2 1       cd xv6 labs 2020   git checkout util   qemu     init  starting sh                                     Ctrl a  x  qemu",
        "objectID": "mit-6.s081-lab-config",
        "date": "2021-06-11T16:49:39.000Z",
        "lastmod": "2021-06-11T16:49:39.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "MIT-6.S081",
            "操作系统"
        ],
        "categories": [
            "MIT-6.S081"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "MIT-6.S081 lab1-util 详解",
        "uri": "mit-6.s081-lab1-util",
        "content": "LAB   https   pdos csail mit edu 6 S081 2020 labs util html sleep      lab                      c                               xv6 book                user echo c  user grep c  user rm c                      c             main          argc argv   agrc           argument count  argv        argument vector           argstest       argstest 1 2 3  argc 4 argv   argstest    1    2    3   NULL    c       NULL                        sleep     argc   2    sleep                    2              atoi               atoi  Ascii Integer        sleep              sleep     kernel sysproc c  sys_sleep       sleep                 user usys S                        sleep  Makefile  UPROGS           c  include  kernel types h   include  kernel stat h   include  user user h  int main int argc  char  argv       argc    2    fprintf 2   Usage  sleep  n    exit 1     int   atoi argv 1    sleep i   exit 0         sleep     shell   qemu     init  starting sh   sleep 10      1           grade lab util sleep         pingpong      I O                    xv6 book               pingpong             1                pipe                    p1 2  p2 2      p1   p2      p1   p2                   wait                                   p1    p2          close        p1              p1       p2                1           p2                 pingpong  Makefile  UPROGS           c  include  kernel types h   include  kernel stat h   include  user user h     Read Write end pipe  define READ_END 0  define WRITE_END 1 int main int argc  char  argv       argc   1    fprintf 2   Usage  pingpong n    exit 1        Create two pipes  p1 p2    Child reads p1  writes p2    Parent reads p2  writes p1 int p1 2   p2 2   pipe p1   pipe p2   char buf 1    fork      0       Child read first close p1 WRITE_END    close p2 READ_END     read p1 READ_END   buf  1     1    close p1 READ_END    printf   d  received ping n   getpid          Child sends byte parent write p2 WRITE_END   buf  1   close p2 WRITE_END      else      Parent write first close p1 READ_END    close p2 WRITE_END       Parent sends byte child write p1 WRITE_END   buf  1   close p1 WRITE_END     read p2 READ_END   buf  1     1    close p2 READ_END    printf   d  received pong n   getpid         exit 0         pingpong     shell   qemu     init  starting sh   pingpong 4  received ping 3  received pong         grade lab util pingpong         primes       this page  primes                      2 35                 2                       2                                         primes             1              main                                2 35                      wait                                         child             child                   pp     pp     int        read    0             pp               pp         i            cp         cp       cp       i        pp    cp      wait                    pp    cp         child         primes  Makefile  UPROGS           c  include  kernel types h   include  kernel stat h   include  user user h     Read Write end pipe  define READ_END 0  define WRITE_END 1    pp  cp stands parent pipe child pipe  respectively void child int pp      close pp WRITE_END    int i   read pp READ_END    i  sizeof i      0    close pp READ_END    exit 0     printf  prime  d n   i   int num  cp 2   pipe cp    fork      0    close pp READ_END    close cp WRITE_END    child cp     else   close cp READ_END     read pp READ_END    num  sizeof num      0     num      0    write cp WRITE_END    num  sizeof num        close pp READ_END    close cp WRITE_END    wait  int    0     exit 0     int main int argc  char  argv       argc   1    fprintf 2   Usage  primes n    exit 1     int p 2   pipe p    fork      0    child p     else   close p READ_END       Feed numbers 2 35 pipe  int   2                     xv6 book             user ls c                        ls c              c  include  kernel types h   include  kernel stat h   include  user user h   include  kernel fs h  char  fmtname char  path       DIRSIZ  kernel fs h        define DIRSIZ 14 static char buf DIRSIZ 1   char  p     Find first character last slash  for p path strlen path   p    path     p         p      p          p                             a b cd     p  cd     Return blank padded name        p       DIRSIZ      p if strlen p     DIRSIZ  return p        p       DIRSIZ        memmove buf  p  strlen p    memset buf strlen p        DIRSIZ strlen p    return buf    void ls char  path    char buf 512    p  int fd           file descriptor         kernel fs h struct dirent de         directory entry         kernel stat h struct stat st          file status       open        path             fd if  fd   open path  0   sizeof buf   printf  ls  path long n    break         path        buf strcpy buf  path         p     buf     p   buf strlen buf        buf              p                       while read fd   de  sizeof de      sizeof de       inum    0           if de inum    0  continue       de name     p   memmove p  de name  DIRSIZ   p DIRSIZ    0  if stat buf   st    path     p         p      p    return p    void f",
        "objectID": "mit-6.s081-lab1-util",
        "date": "2021-06-14T10:45:19.000Z",
        "lastmod": "2021-06-14T10:45:19.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "MIT-6.S081",
            "操作系统"
        ],
        "categories": [
            "MIT-6.S081"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "MIT-6.S081 lab2-syscall 详解",
        "uri": "mit-6.s081-lab2-syscall",
        "content": "LAB   https   pdos csail mit edu 6 S081 2020 labs syscall html System call tracing        trace      mask     mask           1                                        pid         name     return value              kernel syscall h          define SYS_trace 22        trace        c    System call numbers  define SYS_fork 1  define SYS_exit 2  define SYS_wait 3  define SYS_pipe 4  define SYS_read 5  define SYS_kill 6  define SYS_exec 7  define SYS_fstat 8  define SYS_chdir 9  define SYS_dup 10  define SYS_getpid 11  define SYS_sbrk 12  define SYS_sleep 13  define SYS_uptime 14  define SYS_open 15  define SYS_write 16  define SYS_mknod 17  define SYS_unlink 18  define SYS_link 19  define SYS_mkdir 20  define SYS_close 21  define SYS_trace 22    trace     mask 32     32   1 1023 3  syscall read    966 3  syscall read    70 3  syscall read    0                                                   U _trace   Makefile  UPROGS    make qemu          user trace c trace      user user h   trace       prototype  user usys pl   trace              kernel syscall h   trace                make qemu                     trace 32 grep hello README      kernel proc h proc           tracemask  kernel sysproc c     systrace        trace       mask         trace_mask    kernel proc c  fork           np  tracemask   p  tracemask       trace mask           kernel syscall c syscall                                 syscallnames            systrace          syscalls               GitHub Commit       grade lab syscall trace                                Sysinfo   U _sysinfotest   Makefile  UPROGS          sysinfo       trace             kernel sysproc c     syssysinfo           freemem     nproc     sysinfo               freemem nproc              copyout      kernel sysfile c  sysfstat     kernel file c  filestat       kernel kalloc c       kfree_memory                  kalloc c                  freelist          PGSIZE 4K             freelist                 kernel proc c       proc_count            UNUSED             proc c        proc NPROC                 UNUSED                     make qemu     sysproc c               xv6 book     4               kernel defs h        defs h                           GitHub Commit       grade lab syscall sysinfo                 time txt                      make grade        35 35",
        "objectID": "mit-6.s081-lab2-syscall",
        "date": "2021-06-18T08:18:54.000Z",
        "lastmod": "2021-06-18T08:18:54.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "MIT-6.S081",
            "操作系统"
        ],
        "categories": [
            "MIT-6.S081"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "LeetCode面试高频题系列一：单链表翻转",
        "uri": "reverse-linked-list",
        "content": "https   leetcode cn com problems reverse linked list                                                                                                                        next                                                   next          next              next                                                     1            pre          2         next                                      go     Definition singly linked list  type ListNode struct   Val int Next  ListNode      func reverseList head ListNode  ListNode                           head    nil    head Next    nil   return head      pre                  next     nil             pre      nil pre  curr      ListNode  nil   head curr    nil           next        curr        next    curr Next           curr   Next       curr Next   pre pre   curr curr   next           curr       nil  pre                        return pre           go     Definition singly linked list  type ListNode struct   Val int Next  ListNode      func reverseList head ListNode  ListNode             head    nil    head Next    nil   return head          head                           newHead    reverseList head Next       head          head       2    1  head Next Next   head      head    nil       1   nil  head Next   nil            newHead return newHead",
        "objectID": "reverse-linked-list",
        "date": "2021-06-07T04:53:40.000Z",
        "lastmod": "2021-06-07T04:53:40.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "LeetCode"
        ],
        "categories": [
            "LeetCode"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "LeetCode面试高频题系列二：K个一组翻转链表",
        "uri": "reverse-nodes-in-k-group",
        "content": "https   leetcode cn com problems reverse nodes in k group                                                                    go     Definition singly linked list  type ListNode struct   Val int Next  ListNode      func reverseKGroup head ListNode  k int  ListNode                      head head    nil    head Next    nil    k    1   return head                                                        dummy     ListNode Next  head  pre  left  right    dummy  head  head      0                                            go     Definition singly linked list  type ListNode struct   Val int Next  ListNode           K     func reverseKGroup head ListNode  k int  ListNode                      head head    nil    head Next    nil    k    1   return head                                                        dummy     ListNode Next  head  pre  left  right    dummy  head  head      0                                               O n                            go            func reverseKGroup head ListNode  k int  ListNode                      head head    nil    head Next    nil    k    1   return head      n           p  n    head  0 p    nil   n   p   p Next                                                        dummy     ListNode Next  head  pre  left  right    dummy  head  head       pre  left  right                0    n k  i     pre   pre Next left   left Next right   right Next        0    k  i                right     nil                     right    nil   pre Next   reverseBetween left  right  return dummy Next   right   right Next                                pre Next   reverseBetween left  right     pre                  left pre   left    left               right left   right        Reverse  head  tail                                  https   www peileiscott top reverse linked list  func reverseBetween head  tail ListNode  ListNode   head    tail    head Next    tail   return head   prev  curr    tail  head curr    tail   next    curr Next curr Next   prev prev   curr curr   next   return prev",
        "objectID": "reverse-nodes-in-k-group",
        "date": "2021-06-10T07:08:20.000Z",
        "lastmod": "2021-06-10T07:08:20.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "LeetCode"
        ],
        "categories": [
            "LeetCode"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    },
    {
        "title": "面试常考排序算法——Go语言实现",
        "uri": "sort-algorithms",
        "content": "LeetCode    https   leetcode cn com problems sort an array        go func insertionSort nums   int  left  right int       left   1    0    nums j    temp  j     nums j 1    nums j    nums j 1    temp             go func quickSort nums   int  left  right int    left    right   return   index    partition nums  left  right  quickSort nums  left  index 1  quickSort nums  index 1  right    func partition nums   int  left  right int  int                   pos    rand Intn right left 1    left nums left   nums pos    nums pos   nums left  i  j  pivot    left  right  nums left    pivot   j       0  i     sink nums  i  right       right    left  i     nums i   nums left    nums left   nums i  sink nums  left  i 1      func sink nums   int  root  end int      child    2 root   1 child   end   return   child nums child    return   nums root   nums child    nums child   nums root  root   child",
        "objectID": "sort-algorithms",
        "date": "2021-06-08T17:06:01.000Z",
        "lastmod": "2021-06-08T17:06:01.000Z",
        "draft": false,
        "description": "",
        "tags": [
            "LeetCode"
        ],
        "categories": [
            "LeetCode"
        ],
        "hiddenFromHomePage": false,
        "hiddenFromSearch": false,
        "toc": {
            "enable": true
        },
        "math": {
            "enable": true
        },
        "lightgallery": false,
        "license": ""
    }
]